<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Picker Api on ZABURO app</title>
    <link>https://zaburo-ch.github.io/tags/picker-api/</link>
    <description>Recent content in Picker Api on ZABURO app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>ZABURO</copyright>
    <lastBuildDate>Thu, 06 Aug 2015 01:41:08 +0900</lastBuildDate>
    
	<atom:link href="https://zaburo-ch.github.io/tags/picker-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Picker API を使ってみる</title>
      <link>https://zaburo-ch.github.io/post/quick-start-google-picker-api/</link>
      <pubDate>Thu, 06 Aug 2015 01:41:08 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/quick-start-google-picker-api/</guid>
      <description>Google Driveのファイルを利用できるPicker APIを GAE上で使ってみたのでメモっておきます。
クライアントIDが何かとか詳しい話は抜きにしてとにかく動かすまで。
こちらのガイドに従ってやります。
https://developers.google.com/picker/docs/
まずPciker APIを有効にします。
Google Developers ConsoleにログインしてAPIを使うプロジェクトのページに入ります。
左側のサイドバーの「APIと認証」-&amp;gt;「API」を選択。
Pickerとかで検索して「Google Picker API」を選択しAPIを有効にします。
次にクライアントIDとAPIキーを作成します。
「APIと認証」-&amp;gt;「認証情報」から2つとも作成できます。
クライアントIDの方はウェブアプリケーションを選択し、
「JavaScript 生成元」にはAPIを使用するページのオリジンを指定。
今回はlocalhost:8080でも動いて欲しいので次の二つを指定しました。
http://プロジェクトID.appspot.com/
http://localhost:8080/
リダイレクトURLはよくわからなかった。とりあえず、
http://localhost:8080/oauth2callback
みたいな感じで指定してるけどたぶん意味ないです。
APIキーの方はブラウザキーを選択。
リファラーはクライアントIDの時と同じ感じで
http://プロジェクトID.appspot.com/*
http://localhost:8080/*
としました。
これでクライアントIDとAPIキーが取得できたので
先のガイドの「The &amp;ldquo;Hello World&amp;rdquo; Application」のとおりにページを用意して
developerKeyとclientIdを書き換えればとりあえず動きます。
このスクリプトの流れは、
&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo; src=&amp;ldquo;https://apis.google.com/js/api.js?onload=onApiLoad&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  でGoogle API Loader scriptを読み込む。
読み込みが終わると onload=onApiLoad で指定しているonApiLoadが呼ばれて
authとpickerのスクリプトが読み込まれる。
両方読み込まれるとcreatePicker()の内容が実行されて
pickerのインスタンスが作成、可視化される。
という感じになっています。
pickerの生成時にコールバック用の関数とかいろいろ指定できるのですが、
addView()の部分がキモで、ここで表示されるファイルの種類を指定しています。
指定方法についてはガイドの「Showing Different Views」に表が載っていて
サンプルの通りだとPicasaのWeb Albumsにある写真が表示されるようになっています。
こことscopeを表に従って変えればGoogle Driveのアイテムとかも表示できるのですが
全部取得してしまうとごちゃごちゃになるのでsetMimeTypesでMIME Typeを指定します。
MIME TypeはMIME Type 一覧表を見て適当に。
例えばpdfだけを表示するようにしたい場合は次のようにします。</description>
    </item>
    
  </channel>
</rss>