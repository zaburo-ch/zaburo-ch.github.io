<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Numpy on ZABURO app</title>
    <link>https://zaburo-ch.github.io/tags/numpy/</link>
    <description>Recent content in Numpy on ZABURO app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by ZABURO</copyright>
    <lastBuildDate>Thu, 17 Mar 2016 13:37:58 +0900</lastBuildDate>
    
	<atom:link href="https://zaburo-ch.github.io/tags/numpy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythonで Neural Fitted Q Iteration を実装する</title>
      <link>https://zaburo-ch.github.io/post/neural-fitted-q-iteration/</link>
      <pubDate>Thu, 17 Mar 2016 13:37:58 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/neural-fitted-q-iteration/</guid>
      <description>前々回に実装した多層パーセプトロンと前回実装した倒立振子のシミュレータを用いて、
Neural Fitted Q Iteration(NFQ)の実験を行います。
NFQはQ学習の最適行動価値関数を多層パーセプトロンを用いて近似する手法の一つで、
学習中にはデータを追加せず、事前に集められたデータのみから学習を行います。
コードはこんな感じ。MLPはkerasで構築しました。

mはepisodeの個数にあたる変数になっていて、
[50, 100, 150, 200, 300, 400]の各m対して、50回実験を行うようになっています。
実験の大まかな流れは、
 make_episodes(m)でm個のepisodeを作る
 多層パーセプトロンを構築
 Neural Fitted Q Iterationを実行
 倒立振子を立たせるタスクを実行
 停止するまでの時間を記録(t&amp;lt;299なら失敗、t==299なら成功)
  という感じです。肝心の3.では、
episodesの中からpattern_set_size個ずつepisodesを取り出し、
その中の各cycleから入力xと教師信号tを作成して、
多層パーセプトロンをこれにfitさせるのを繰り返すことで学習を行っています。
episodes1周だけではうまくタスクを成功させることができなかったので、
毎回取り出す順番をランダムに変えてepisodesを5周させるようにしています。
実験結果は次のようになりました。
   m 成功した回数     50 25 / 50 (50%)   100 41 / 50 (82%)   150 43 / 50 (86%)   200 43 / 50 (86%)   300 48 / 50 (96%)   400 46 / 50 (92%)    m = 50 の場合については論文とほぼ同程度成功できています。</description>
    </item>
    
    <item>
      <title>Pythonで 倒立振子のシミュレータ を実装する</title>
      <link>https://zaburo-ch.github.io/post/inverted-pendulum/</link>
      <pubDate>Tue, 15 Mar 2016 21:00:44 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/inverted-pendulum/</guid>
      <description>Neural Fitted Q Iterationの実験で使う倒立振子のシミュレータを書きました。
論文ではCLSquareというシステムを使って実験が行われているのですが、
頑張ってインストールしたものの上手く動かせなかったので自分で書きました。
倒立振子の運動方程式についてはこちらのスライドが詳しいです。
今回は摩擦を無視するのでスライドでいう B と C が 0 になります。
台車の重さやポールの長さなどの各種定数は、NFQの論文に倣い、
これのInverted Pendulumの実験と同じにしました。
コードはこんな感じ。 
アクションは[-50N, 50N, 0N]の3種類で、[0, 1, 2]で表現しました。
do_action(a)でアクションが実行され t だけ時間が進みます。
matplotlibでビジュアライズできるようにしたので、
実行すると次のようなアニメーションが表示されます。
加速度がこの式で与えられるのは微分してみたらわかるけど、
速度や位置(角速度や角度)をどうやって更新していいのかわからなかったので、
tが小さければ高校物理のvt+1&amp;frasl;2*at^2で大丈夫でしょって感じで
t_sum回ループ回して細かく更新することでそれっぽい結果を得ました。
ちゃんと検索してみるとC言語での実装が見つかったので、
これを真似してupdate_stateを書き換えてみるとこんな感じ。  物理が分からない自分が書いたコードより安心なので、実験ではこっちを使おうと思います。</description>
    </item>
    
    <item>
      <title>Pythonで 多層パーセプトロン を実装する</title>
      <link>https://zaburo-ch.github.io/post/mlp/</link>
      <pubDate>Sat, 20 Feb 2016 01:29:30 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/mlp/</guid>
      <description>前回は古典的Q学習を実装しましたが、次はニューラルネットを用いたQ学習として、
Neural Fitted Q Iterationを使ったQ学習を実装しようと考えています。
今回はその前の勉強として、
誤差逆伝播法を用いた多層パーセプトロンをNumPyだけで実装してみます。
誤差逆伝播法についてはこちらのスライドが詳しいです。

わかりやすいパターン認識_3章
コードはこんな感じ。 
活性化関数は全てシグモイド関数で、コスト関数は残差の平方和を用いました。
各層はforwardで出力を計算して、
backwardで前の層の誤差を計算しつつ W や b の更新を行います。
tanhなどの層も同じような関数を実装してMLPのinitを適宜変えれば使える(はず)。
DeepLearningTutorialsのMLPのコードっぽくしたくて、
DeepLearningTutorialsのDBNをNumPyで実装した方のコードとか、
NumPyでMLPを実装を実装した方のコードなどを参考に書きました。
各所に載っている式を見る限りは出力層も活性化関数を使うっぽいんですが、
Chainerの多層パーセプトロンのサンプルをはじめとして、
出力層で線形変換するだけ(活性化関数を使わない)のものが結構あって混乱しました。
たぶんシグモイド関数やtanhだと出力できる範囲が狭くて不便なので
出力層だけ恒等関数使ってるんだろうという感じでとりあえず考えています。
先のNFQの論文で、全ての層でシグモイドを使ったみたいなことが書いてあったので、
今回は出力層にもシグモイド関数を使うことにしています。
あと出力層での誤差も、出力層の活性化関数の微分をかけるのかどうかがわからなくて
結構悩みましたが、スライドの式に従ってかけることにしました。
また、確率的勾配降下法(SGD)でミニバッチを使った学習ができるように書きましたが、
ミニバッチを使う時に W や b の更新をどうやるのかがよくわからなくて、
結局ループ回して学習パターン1つずつ使って更新を行うようにしました。
出力層の時点で誤差の和をとってそれを伝播するんだと思ったのですが、
そしたらそれと掛け合わせる前の層の出力はどうするんだ！？ってなって
結局わからず、まあ結局やってること大体一緒でしょってことでこの形にしました。
結果はこんな感じになります。赤が教師信号、青がMLPの出力で、
左が1000回反復した場合、右が10000回反復した場合です。
たぶん学習できていると思うのですが、
いまいちうまくいっているのか確証が持てなかったので、
同じネットワークをChainerでも実装してみました。
コードはここ。Tutorialのものをちょっといじっただけです。
結果は次の通り。
Chainerの方が若干うまく近似できていますが、
概ね同じような感じの結果が得られたので、自分で書いた方も大丈夫なはず。
実行時間はNumPyだけの方がかなり早いです。
ただ自分で微分する必要もなく適当に層つなぐだけで出来ちゃったのでChainerすごい
2016/03/15 追記
Kerasでも試してみました。コードはここ。
結果はだいたい同じような感じ
後ろでTheanoが使われていることもありかなり速いです。
まだMLP書いただけなので、もっと大規模なモデルを実装するときにどうなるかはわかりませんが、
モデルの記述の仕方や、sklearnっぽいfit・predictの書き方など、
結構書きやすいように感じました。もっと使ってみたい。</description>
    </item>
    
    <item>
      <title>Pythonで Q学習 を実装する</title>
      <link>https://zaburo-ch.github.io/post/q-learning/</link>
      <pubDate>Sun, 14 Feb 2016 14:28:18 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/q-learning/</guid>
      <description>Deep Q-Networkについて調べてみたら面白い記事を見つけました。
DQNの生い立ち　＋　Deep Q-NetworkをChainerで書いた
http://qiita.com/Ugo-Nama/items/08c6a5f6a571335972d5
この記事を読んで、Deep Q-Networkが
Q学習 -&amp;gt; Q-Network -&amp;gt; Deep Q-Network という流れ生まれたものだということがわかりました。
この流れをPythonで実装しながら辿ってみようと思います。
今回はQ学習を実装します。
Q学習について下記のページに詳しく載っているので割愛します。
強化学習
http://www.sist.ac.jp/~kanakubo/research/reinforcement_learning.html
強化学習とは？
http://sysplan.nams.kyushu-u.ac.jp/gen/edu/RL_intro.html
まず、Q学習で適応する環境として次のような簡単な環境を考えます。
環境の状態は、&#39;A&#39;または&#39;B&#39;からなる長さ8の文字列で表され、 その文字列にはある法則により得点がつけられる。 プレイヤーはその法則についての知識を予め持たないが、 文字列中の任意の1文字を選んで&#39;A&#39;または&#39;B&#39;に置き換えることができ、 その結果、その操作による得点の変化量を報酬として受け取る。  たぶんマルコフ決定過程になっていると思います。マルコフ性、エルゴート性も持つはず。
文字列に得点をつける法則はなんでも良いのですが、
今回は、特定の文字列(単語)に次のように得点を割り当てて、
{&amp;ldquo;A&amp;rdquo;: 1, &amp;ldquo;BB&amp;rdquo;: 1, &amp;ldquo;AB&amp;rdquo;: 2, &amp;ldquo;ABB&amp;rdquo;: 3, &amp;ldquo;BBA&amp;rdquo;: 3, &amp;ldquo;BBBB&amp;rdquo;: 4}
文字列中に含まれる単語の合計得点を文字列の得点とするということにします。
例えば&amp;rdquo;AAAAAAAA&amp;rdquo;なら8点(1 * 8)、&amp;rdquo;AAAAAAAB&amp;rdquo;なら9点(1 * 7 + 2)です。
環境のとりうる状態は長さ8のそれぞれに&amp;rsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;の2通りあるので2^8通りあり、
アクションは、何もしないのと、位置1~8のそれぞれを&amp;rsquo;A&amp;rsquo;または&amp;rsquo;B&amp;rsquo;なのでを計17通りあります。
今回のコードでは状態は文字列、アクションは整数(0~16)で管理します。
 先述した強化学習の記事では、Q学習の学習中に、
一定の回数遷移を繰り返した後、状態をs0に戻すものとそうでないものがあり、
どちらを採用するか悩んだので QLearning(n_rounds, t_max)として
2重のループにすることで一応どちらの方法でも実行できるようにしました。
これを実行結果はこんな感じ
軸のラベルを書き忘れていますが、
横軸が外側のループが回った数で、縦軸がそれまでに学習したQを使ってt_max回遷移した時のスコアですね。
&amp;ldquo;ABBBBBBB&amp;rdquo;に遷移して終わるのとき最大値28をとるのですが、
約900セット(t_max * 900回)の学習でそれを実現する遷移ができるようになっています。</description>
    </item>
    
  </channel>
</rss>