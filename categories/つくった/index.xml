<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>つくった on ZABURO app</title>
    <link>https://zaburo-ch.github.io/categories/%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F/</link>
    <description>Recent content in つくった on ZABURO app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 14 May 2015 22:36:00 +0900</lastBuildDate>
    <atom:link href="https://zaburo-ch.github.io/categories/%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wikipediaの記事でPageRankを計算してみた。</title>
      <link>https://zaburo-ch.github.io/post/20150514_1/</link>
      <pubDate>Thu, 14 May 2015 22:36:00 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20150514_1/</guid>
      <description>&lt;p&gt;PageRankの記事の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/20150514_1/&#34; target=&#34;_blank&#34; title=&#34;【Python】PageRankアルゴリズム&#34;&gt;【Python】PageRankアルゴリズム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PageRank実装だけして終わるのももったいないので&lt;br /&gt;
Wikipediaのページ内でPageRank計算してみました。&lt;/p&gt;

&lt;p&gt;コードはこちら&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/wikipedia_analysis&#34; target=&#34;_blank&#34; title=&#34;zaburo-ch/wikipedia_analysis&#34;&gt;zaburo-ch/wikipedia_analysis&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/wikipedia_analysis&#34;&gt;https://github.com/zaburo-ch/wikipedia_analysis&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
前に作ったwikipedia.pyのコードとまとめてレポジトリにしました。&lt;/p&gt;

&lt;p&gt;pagerank_wiki.pyを実行すると次のような動作をします。&lt;br /&gt;
・&lt;a href=&#34;http://dumps.wikimedia.org&#34; target=&#34;_blank&#34; title=&#34;http://dumps.wikimedia.org&#34;&gt;&lt;a href=&#34;http://dumps.wikimedia.org&#34;&gt;http://dumps.wikimedia.org&lt;/a&gt;&lt;/a&gt;より1日分のデータを取得&lt;br /&gt;
・国コードがjaのもののうち閲覧数上位10000ページを取り出す&lt;br /&gt;
・各ページの記事内のリンクをエッジとした有向グラフつくる&lt;br /&gt;
・有向グラフ内でPageRankを計算し大きい順に出力する&lt;/p&gt;

&lt;p&gt;やってることはかなりwikipedia.pyに近いですが、&lt;br /&gt;
見返してみるとあまりにもなコードだったのでかなり書き換えました。&lt;br /&gt;
他にもリンク抽出にHTMLParser使ってみたりいろいろ変えてます。&lt;/p&gt;

&lt;p&gt;前のやつと違って計算の部分にそれほど時間がかからないので&lt;br /&gt;
スペック次第ですが少なくとも寝てる間くらいには終わると思います。&lt;br /&gt;
リンク解析もこっちのほうがかなり早いです。&lt;/p&gt;

&lt;p&gt;さて、肝心の実行結果はこんな感じです。&lt;br /&gt;
&lt;a href=&#34;https://zaburo-ch.github.io/images/pagerankwikiresult.png/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/pagerankwikiresult.png&#34; alt=&#34;pagerankwikiresult.png&#34; border=&#34;0&#34; width=&#34;435&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/wikipedia_analysis/blob/master/pagerank_wiki_data/result.txt&#34; target=&#34;_blank&#34; title=&#34;wikipedia_analysis/pagerank_wiki_data/result.txt&#34;&gt;wikipedia_analysis/pagerank_wiki_data/result.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「特別:カテゴリ」がぶっちぎりで大きいですね。&lt;br /&gt;
確認してみたところほぼ全てのページの一番下に&lt;br /&gt;
「特別:カテゴリ」へのリンクがあったのでたぶんそのせいです。&lt;br /&gt;
「Wikipedia:出典を明記する」とかもこの類いかな。&lt;/p&gt;

&lt;p&gt;「日本」や年がおおいのは人とか何かの作品の記事の&lt;br /&gt;
テンプレート化している右の枠内で登場することが多いためだと思います。&lt;/p&gt;

&lt;p&gt;テレビ局が上位に多いのはテレビ番組からほぼ確実にリンクされているのと&lt;br /&gt;
閲覧数上位10000ページで限定しているため&lt;br /&gt;
そのなかでテレビ番組が多かったためではないかと考えています。&lt;/p&gt;

&lt;p&gt;上位はほとんどが誰でも知っているような一般的な言葉なんですが、&lt;br /&gt;
101位のインターネット・ムービー・データベースってやつ、&lt;br /&gt;
全然何のことかわからないです。&lt;br /&gt;
「集英社」とか「台湾」より上なので、&lt;br /&gt;
かなり多くページがここにリンクしてるはずなんですが、&lt;br /&gt;
これどんなページからリンクされてるんでしょう？&lt;/p&gt;

&lt;p&gt;全体的にPageRankはWikipediaのページの重要性判断としては&lt;br /&gt;
あまり向いていないように思いました。&lt;br /&gt;
WikipediaにはPageRankの基本的な考え方が合ってないですしね。&lt;br /&gt;
ほかのWebサイトでも試してみればもっと面白い結果が得られるかもしれません。&lt;br /&gt;
機会があればやってみたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Python】PageRankアルゴリズム</title>
      <link>https://zaburo-ch.github.io/post/20150514_0/</link>
      <pubDate>Thu, 14 May 2015 20:54:05 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20150514_0/</guid>
      <description>&lt;p&gt;PageRankというアルゴリズム、&lt;br /&gt;
以前からなんとなくは知ってはいたのですが、&lt;br /&gt;
ランダムサーファーモデルで計算する方法を聞いて、&lt;br /&gt;
めちゃくちゃ賢いなこれーって思ったので実際にやってみました。&lt;/p&gt;

&lt;p&gt;ひとまずPageRankについて調べたことを纏めます。&lt;/p&gt;

&lt;p&gt;PageRankは基本的に次の２つの考え方でページの重要度を推定します。&lt;br /&gt;
・多くのページからリンクされているページの質は高い&lt;br /&gt;
・質の高いページからリンクされているページの質は高い&lt;/p&gt;

&lt;p&gt;これを数学的に考えるのにランダムサーファーモデルを利用します。&lt;br /&gt;
ランダムサーファーモデルでは&lt;br /&gt;
ページのリンク関係を有向グラフとして考え、&lt;br /&gt;
人(サーファー)にこの有向グラフをランダムに辿らせたとき、&lt;br /&gt;
人が居る確率が高いページを重要とします。&lt;/p&gt;

&lt;p&gt;まず、ページの総数をNとし、N次正方行列&lt;strong&gt;M&lt;/strong&gt;を&lt;br /&gt;
&lt;strong&gt;M&lt;/strong&gt;[i][j] = ページjにいるサーファーがページiに移動する確率&lt;br /&gt;
と定義します。&lt;br /&gt;
例えばページ0にページ1とページ5へのリンクしかないとすると、&lt;br /&gt;
サーファーはランダムに移動するので&lt;br /&gt;
&lt;strong&gt;M&lt;/strong&gt;[i][0]は i=1or5 のとき1/2 となりそれ以外のiでは0となります。&lt;/p&gt;

&lt;p&gt;また、ベクトル&lt;strong&gt;P&lt;/strong&gt;(t)を時刻tに各ページに人がいる確率とすると&lt;br /&gt;
&lt;strong&gt;P&lt;/strong&gt;(0)は全ての要素が 1/N のベクトルとなり&lt;br /&gt;
&lt;strong&gt;P&lt;/strong&gt;(t+1)は&lt;strong&gt;M&lt;/strong&gt;と&lt;strong&gt;P&lt;/strong&gt;(t)の積を取ることで計算できます。&lt;/p&gt;

&lt;p&gt;有向グラフが強連結のとき、この遷移を無限に繰り返すことで&lt;br /&gt;
&lt;strong&gt;P&lt;/strong&gt;はtに依らない一定の値に収束します。よってこの&lt;strong&gt;P&lt;/strong&gt;は&lt;br /&gt;
&lt;strong&gt;M P&lt;/strong&gt; = &lt;strong&gt;P&lt;/strong&gt;&lt;br /&gt;
の解を要素の和が1になるよう正規化してあげることにより求められます。&lt;/p&gt;

&lt;p&gt;この&lt;strong&gt;P&lt;/strong&gt;の大きさが各ページの重要度となります。&lt;/p&gt;

&lt;p&gt;行列計算において &lt;strong&gt;Ax&lt;/strong&gt; = λ&lt;strong&gt;x&lt;/strong&gt; を解く、というのは固有値問題と言って&lt;br /&gt;
色々な方法が考えられているらしいのですが、ここについては&lt;br /&gt;
&lt;a href=&#34;http://www.cms-initiative.jp/ja/events/0627yamamoto.pdf&#34; target=&#34;_blank&#34; title=&#34;行列計算における高速アルゴリズム&#34;&gt;行列計算における高速アルゴリズム&lt;br /&gt;
&lt;a href=&#34;http://www.cms-initiative.jp/ja/events/0627yamamoto.pdf&#34;&gt;http://www.cms-initiative.jp/ja/events/0627yamamoto.pdf&lt;/a&gt;&lt;br /&gt;
&lt;/a&gt;こちらのページが詳しいです。&lt;br /&gt;
Pythonではscipy.sparse.linalg.eigsを使うと&lt;br /&gt;
Implicitly Restarted Arnoldi で計算してくれます。&lt;br /&gt;
ただ、&lt;strong&gt;M P&lt;/strong&gt; = &lt;strong&gt;P&lt;/strong&gt; を解くだけのためにこれらを使うのが速いのかは&lt;br /&gt;
勉強不足で僕もよくわかっていません。&lt;/p&gt;

&lt;p&gt;実際のウェブページでは、ページ間の関係を有効グラフにしても&lt;br /&gt;
必ずしも上で述べたような強連結になるわけではありません。&lt;br /&gt;
そのため「一定の確率でサーファーはリンクを辿らずにランダムに移動する」&lt;br /&gt;
という考えを新たに導入します。その時はMにあたるものを&lt;br /&gt;
全ての要素が 1/N である N次正方行列Uと普通にリンクを辿る確率αを用いて&lt;br /&gt;
(α&lt;strong&gt;M&lt;/strong&gt; + (1-α)&lt;strong&gt;U&lt;/strong&gt;) として計算することによって&lt;strong&gt;P&lt;/strong&gt;が求められます。&lt;/p&gt;

&lt;p&gt;次の図のようなリンク関係にあるページのPageRankを&lt;br /&gt;
Pythonを利用して実際に計算してみます。&lt;br /&gt;
正しく計算できれば図の通りの値が得られるはずです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/Linkstruct2.gif&#34; alt=&#34;Linkstruct2.gif&#34; border=&#34;0&#34; width=&#34;400&#34; height=&#34;368&#34; /&gt;&lt;br /&gt;
&lt;span style=&#34;font-size:x-small;&#34;&gt;&lt;br /&gt;
The original uploader was &lt;a title=&#34;wikipedia:User:Gnix&#34; href=&#34;//en.wikipedia.org/wiki/User:Gnix&#34;&gt;Gnix&lt;/a&gt; at &lt;a title=&#34;wikipedia:&#34; href=&#34;//en.wikipedia.org/wiki/&#34;&gt;English Wikipedia&lt;/a&gt;[&lt;a href=&#34;http://www.gnu.org/copyleft/fdl.html&#34; target=&#34;_blank&#34; title=&#34;GFDL&#34;&gt;GFDL&lt;/a&gt; or &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34; target=&#34;_blank&#34; title=&#34;CC-BY-SA-3.0&#34;&gt;CC-BY-SA-3.0&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;コードはこちら&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/wikipedia_analysis/blob/master/pagerank.py&#34; target=&#34;_blank&#34; title=&#34;zaburo-ch/wikipedia_analysis/master/pagerank.py&#34;&gt;zaburo-ch/wikipedia_analysis/master/pagerank.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;get_pagerankではScipyを用いて固有ベクトルを計算しています。&lt;br /&gt;
get_pagerank_simpleではもっと単純に&lt;br /&gt;
&lt;strong&gt;P&lt;/strong&gt;(0)に何度も&lt;strong&gt;M&lt;/strong&gt;をかけていき、&lt;br /&gt;
かける前との差が十分小さくなるまで繰り返しています。&lt;/p&gt;

&lt;p&gt;実行結果はこんな感じです。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/pagerankresult.png&#34; alt=&#34;pagerankresult.png&#34; border=&#34;0&#34; width=&#34;273&#34; height=&#34;258&#34; /&gt;&lt;/p&gt;

&lt;p&gt;図の値とかなり一致していますね！&lt;br /&gt;
2つの方法どちらもほぼ同じ値になっているので&lt;br /&gt;
get_pagerank_simpleの方法でも十分実用に足りそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac OS Xで時々ジェスチャーが反応しなくなる</title>
      <link>https://zaburo-ch.github.io/post/20150324_0/</link>
      <pubDate>Tue, 24 Mar 2015 17:21:45 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20150324_0/</guid>
      <description>&lt;p&gt;普段ウインドウの切り替えはMission Controlでやっているのですが、&lt;br /&gt;
ときどきジェスチャーが反応しなくなってしまって、&lt;br /&gt;
仮想デスクトップの切り替えもできなくなるものですから&lt;br /&gt;
再起動しなければならなくなる、というのが近頃起こります。&lt;/p&gt;

&lt;p&gt;原因はよくわからないのですが、&lt;br /&gt;
OSまるごと再起動しなくてもDockを再起動させてやるだけで&lt;br /&gt;
なんとかなるみたいです。&lt;/p&gt;

&lt;p&gt;ps -x | grep Dockで出てきたPIDを指定してkillしてやると&lt;br /&gt;
自動で起動してくれるようなのでこれで済ませていますが&lt;br /&gt;
面倒なので実行ファイルへの変換の勉強がてら&lt;br /&gt;
ちょっと書いてアプリにしてみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zaburo-ch.github.io/images/a.png/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/a.png&#34; alt=&#34;a.png&#34; border=&#34;0&#34; width=&#34;139&#34; height=&#34;102&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
こんな感じでDockに配置して使っています。&lt;/p&gt;

&lt;p&gt;アイコン画像は以下のものを利用させて頂きました。&lt;br /&gt;
&lt;a href=&#34;http://www.easyicon.net/language.ja/1088483-stop_icon.html&#34; target=&#34;_blank&#34; title=&#34;http://www.easyicon.net/language.ja/1088483-stop_icon.html&#34;&gt;&lt;a href=&#34;http://www.easyicon.net/language.ja/1088483-stop_icon.html&#34;&gt;http://www.easyicon.net/language.ja/1088483-stop_icon.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ソース等はこちら&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/DockKiller&#34; target=&#34;_blank&#34; title=&#34;https://github.com/zaburo-ch/DockKiller&#34;&gt;&lt;a href=&#34;https://github.com/zaburo-ch/DockKiller&#34;&gt;https://github.com/zaburo-ch/DockKiller&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらからダウンロードしてご利用ください↓&lt;br /&gt;
&lt;a href=&#34;https://github.com/zaburo-ch/DockKiller/raw/master/DockKiller-1.0.dmg&#34; target=&#34;_blank&#34; title=&#34;DockKiller-1.0.dmgをダウンロード&#34;&gt;DockKiller-1.0.dmgをダウンロード&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wikipediaのページ解析に使ったpythonコード</title>
      <link>https://zaburo-ch.github.io/post/20141130_0/</link>
      <pubDate>Sun, 30 Nov 2014 01:36:54 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20141130_0/</guid>
      <description>&lt;p&gt;すっかりわすれていましたがソースコードです。&lt;br /&gt;
とりあえずpython触ってみようくらいの気持ちで書いたコードなので&lt;br /&gt;
pythonに慣習みたいなものがあるならたぶんそれには従えていません。&lt;br /&gt;
multiprocessing、numpy、pandasあたりをちゃんと使えば&lt;br /&gt;
格段に早くすることもできるかもしれません。やんないけど。&lt;/p&gt;

&lt;p&gt;python wikipedia.py 20141101&lt;br /&gt;
のようにして日付指定して使います。&lt;/p&gt;

&lt;p&gt;以下のようなことをやってます。&lt;br /&gt;
・&lt;a href=&#34;http://dumps.wikimedia.orgから1時間ごとの閲覧数のデータを1日分取ってくる&#34;&gt;http://dumps.wikimedia.orgから1時間ごとの閲覧数のデータを1日分取ってくる&lt;/a&gt;&lt;br /&gt;
・国コード(?)がjaの物だけ抽出する&lt;br /&gt;
・標準ライブラリのCounterで各ページの1日分の閲覧数をカウントする&lt;br /&gt;
・閲覧数上位10000ページを取り出す&lt;br /&gt;
・1ページずつ開き記事内の/wiki/で始まるリンクを抽出する&lt;br /&gt;
・リンクがあれば距離1なければINFとして(ディクショナリで)隣接行列をつくる&lt;br /&gt;
・ワーシャルフロイド法で全点間最短距離を求める&lt;br /&gt;
・ソートして表示&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/zaburo-ch/d2fceee659bd28ef7e22.js&#34;&gt;&lt;/script&gt;&lt;br /&gt;
Gistを使ってみました。綺麗に表示してくれますね。&lt;br /&gt;
過去の物をGistに置き換えたりはしませんが&lt;br /&gt;
今後はできるだけこれをつかっていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wikipediaのアクセス上位10000ページの距離を計算した話</title>
      <link>https://zaburo-ch.github.io/post/20141017_0/</link>
      <pubDate>Fri, 17 Oct 2014 23:44:17 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20141017_0/</guid>
      <description>&lt;p&gt;先日の記事の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/20141003_0/&#34; target=&#34;_blank&#34; title=&#34;Wikipediaでリンクを辿って遊ぶ&#34;&gt;Wikipediaでリンクを辿って遊ぶ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回探したのはWikipediaに存在する記事のうち&lt;br /&gt;
最も距離のはなれている記事の組み合わせです。&lt;/p&gt;

&lt;p&gt;ここで言う距離とは、ある記事から記事内のリンクのみを辿って行く時&lt;br /&gt;
何回リンクを踏めばその記事に辿り着くかを表した数字です。&lt;br /&gt;
複数あるルートのうち最も短いものをその組の距離としました。&lt;/p&gt;

&lt;p&gt;さて、Wikipediaについてですが、&lt;br /&gt;
&lt;a href=&#34;http://ja.wikipedia.org/wiki/Wikipedia:%E5%85%A8%E8%A8%80%E8%AA%9E%E7%89%88%E3%81%AE%E7%B5%B1%E8%A8%88&#34; target=&#34;_blank&#34; title=&#34;Wikipedia:全言語版の統計&#34;&gt;Wikipedia:全言語版の統計&lt;br /&gt;
&lt;a href=&#34;http://ja.wikipedia.org/wiki/Wikipedia:%E5%85%A8%E8%A8%80%E8%AA%9E%E7%89%88%E3%81%AE%E7%B5%B1%E8%A8%88&#34;&gt;http://ja.wikipedia.org/wiki/Wikipedia:%E5%85%A8%E8%A8%80%E8%AA%9E%E7%89%88%E3%81%AE%E7%B5%B1%E8%A8%88&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
によれば、2014年10月17日現在&lt;br /&gt;
純記事数は全言語総計でなんと&lt;strong&gt;33,448,472&lt;/strong&gt;もあるそうです。&lt;br /&gt;
日本語のものだけで&lt;strong&gt;930,619&lt;/strong&gt;もあるので&lt;br /&gt;
これをすべて解析するとなると人生が終わるまでに&lt;br /&gt;
計算し終わるかという問題が出てきます。&lt;/p&gt;

&lt;p&gt;というわけで今回は、日本語版Wikipediaの記事のうち&lt;br /&gt;
ある日の閲覧数が上位の記事を一定数とって来て&lt;br /&gt;
その記事のみを対象にページ間距離を計算しました。&lt;/p&gt;

&lt;p&gt;技術的なことは後日記事にするとして&lt;br /&gt;
早速結果を書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;まず2014年9月1日の閲覧数上位1000位に限定した場合の結果。&lt;br /&gt;
上位20位のみを抜粋しました。&lt;br /&gt;
&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;ndash;&lt;/p&gt;

&lt;p&gt;List of longest distance between Wikipedia pages&lt;br /&gt;
20140901 : Page view Top 1000&lt;/p&gt;

&lt;p&gt;1:  8 続柄 -&amp;gt; 近江友里恵&lt;br /&gt;
   2:  8 続柄 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
   3:  8 国鉄105系電車 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
   4:  8 七草 -&amp;gt; 近江友里恵&lt;br /&gt;
   5:  8 七草 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
   6:  8 カルトの集団自殺 -&amp;gt; 近江友里恵&lt;br /&gt;
   7:  8 カルトの集団自殺 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
   8:  8 特別:最近の更新 -&amp;gt; 近江友里恵&lt;br /&gt;
   9:  8 特別:最近の更新 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  10:  8 カツオノカンムリ -&amp;gt; 近江友里恵&lt;br /&gt;
  11:  8 カツオノカンムリ -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  12:  8 城井鎮房 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  13:  8 奇皇后 -&amp;gt; 近江友里恵&lt;br /&gt;
  14:  8 奇皇后 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  15:  8 標準偏差 -&amp;gt; 近江友里恵&lt;br /&gt;
  16:  8 標準偏差 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  17:  8 青春18きっぷ -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  18:  8 特別:検索 -&amp;gt; 近江友里恵&lt;br /&gt;
  19:  8 特別:検索 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;br /&gt;
  20:  8 龍虎 -&amp;gt; たちかぜ自衛官いじめ自殺事件&lt;/p&gt;

&lt;p&gt;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;#45;&amp;ndash;&lt;/p&gt;

&lt;p&gt;たちかぜ自衛官いじめ自殺事件の存在感が半端ないですね。&lt;br /&gt;
8回リンク踏むだけでいけちゃうということで&lt;br /&gt;
案外短くてがっかりしました。&lt;br /&gt;
105位まで距離8がありその後2500位くらいまで距離7が続きます。&lt;/p&gt;

&lt;p&gt;思った以上に大したことが無い結果が出てしまったので&lt;br /&gt;
上位10000ページでもやりたいところですが、&lt;br /&gt;
上位1000ページでさえ20分程度時間がかかっていて、&lt;br /&gt;
最短距離の計算につかったアルゴリズムの計算量がO(n^3)なので&lt;br /&gt;
約1000倍の時間がかかることになります。&lt;/p&gt;

&lt;p&gt;終わるまでの時間を計算してみた結果、&lt;br /&gt;
まあ現実的な時間で終わるだろうという数字が出たので&lt;br /&gt;
ここ数日ずっとパソコンをフル稼働させて計算していました。&lt;/p&gt;

&lt;p&gt;そして、その結果が今日、出ました！&lt;br /&gt;
利用したデータは2014年10月1日の閲覧数上位10000ページ。&lt;br /&gt;
要した時間なんと&lt;span style=&#34;font-size:large;&#34;&gt;&lt;strong&gt;261時間！&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
その結果は！&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-size:x-large;&#34;&gt;&lt;strong&gt;保存できませんでした！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;というのも使ったパソコンには4GBしかメモリが積まれていないので&lt;br /&gt;
ターミナルの出力をコピーしようとした瞬間&lt;br /&gt;
ターミナルがフリーズして永遠の眠りについてしまいました。&lt;br /&gt;
何とかログの復旧を試みたのですが&lt;br /&gt;
89129689位以降というまったく意味のないデータしか復元できませんでした。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;font-size:large;&#34;&gt;最も離れている距離は6&lt;/span&gt;&lt;/strong&gt;だったのは確認しました。&lt;br /&gt;
1000ページの時より小さい結果となりましたが、&lt;br /&gt;
ページが増える事で新しいより短いルートが生まれたのだと思います。&lt;/p&gt;

&lt;p&gt;結果が公開できないのは大変残念ですが、&lt;br /&gt;
そもそもいけないページを除けば、&lt;br /&gt;
6回リンクを踏むだけで大体のページ同士はいけてしまうというのは&lt;br /&gt;
10000ページに限られてるとはいえなかなか面白い結果だと思います。&lt;br /&gt;
普段みるようなページは大体10000ページの中に含まれていますしね。&lt;/p&gt;

&lt;p&gt;250時間以上ずっと電源をつけて、ファンがまわるほど計算させていたので&lt;br /&gt;
使ったMacbook Airのバッテリーが心配になりました。&lt;br /&gt;
二度とやりません！&lt;/p&gt;

&lt;p&gt;詳しい方法等はソースコードとともに後日記事にしたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>とんぺーのミスコンにエントリーした気分になれるブックマークレットつくった</title>
      <link>https://zaburo-ch.github.io/post/20141007_0/</link>
      <pubDate>Tue, 07 Oct 2014 22:40:04 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20141007_0/</guid>
      <description>&lt;p&gt;使い方&lt;/p&gt;

&lt;p&gt;1.幅140px高さ260pxの画像を用意する。&lt;/p&gt;

&lt;p&gt;2.画像のURLをこのテキストボックスに入れる。&lt;script src=&#34;https://zaburo-ch.github.io/code/fc2_fes4.js&#34;&gt;&lt;/script&gt;&lt;br /&gt;
&lt;input type=&#34;text&#34; size=&#34;80px&#34; value=&#34;ここに画像のURLを入れて下さい&#34; id=&#34;imgurl&#34; onblur=&#34;onb();&#34;&gt;&lt;/input&gt;&lt;/p&gt;

&lt;p&gt;3.このリンクを右クリックしてブックマーク&lt;br /&gt;
&lt;a href=&#34;#&#34; id=&#34;bookmarklink&#34;&gt;&lt;strong&gt;学祭ミスコン ブックマークレット&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.コンテストの公式ページに行く&lt;br /&gt;
&lt;a href=&#34;http://www.festa-tohoku.org/program/contest/contest.html&#34; target=&#34;_blank&#34; title=&#34;第6回Mr.&amp;amp;Ms.東北大コンテスト&#34;&gt;&lt;strong&gt;第6回Mr.&amp;amp;Ms.東北大コンテスト&lt;br /&gt;
&lt;a href=&#34;http://www.festa-tohoku.org/program/contest/contest.html&#34;&gt;http://www.festa-tohoku.org/program/contest/contest.html&lt;/a&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.先ほどのブックマークを開く！&lt;br /&gt;
5人目のミス候補が現れます。&lt;/p&gt;

&lt;p&gt;マウスを画像にのせたときの白いオーバーレイは実装しましたが、&lt;br /&gt;
名前やNo.5の記述は省略しました。&lt;br /&gt;
以下に元のコードを載せるので、誰かやって！&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;
var imgurl = &amp;lsquo;ms1.jpg&amp;rsquo;;
var msul = $(&amp;lsquo;ul&amp;rsquo;).eq(1);
msul.children().attr(&amp;lsquo;style&amp;rsquo;,&amp;lsquo;margin-right:25px;&amp;lsquo;);
var newms = $(&amp;rsquo;&amp;lt;li&amp;gt;&amp;rsquo;);
newms.css({
    &amp;lsquo;position&amp;rsquo;:&amp;lsquo;relative&amp;rsquo;,
    &amp;lsquo;float&amp;rsquo;:&amp;lsquo;left&amp;rsquo;,
    &amp;lsquo;width&amp;rsquo;:&amp;lsquo;150px&amp;rsquo;,
    &amp;lsquo;height&amp;rsquo;:&amp;lsquo;270px&amp;rsquo;,
    &amp;lsquo;background-image&amp;rsquo;:&amp;lsquo;-moz-linear-gradient(top,#931f20,#f29d80 50%,#931f20)&amp;rsquo;
});
newms.css(&amp;lsquo;background-image&amp;rsquo;,&amp;lsquo;-webkit-gradient(linear,left top,left bottom,from(#931f20),color-stop(0.5, #f29d80),to(#931f20))&amp;rsquo;);
var msimg = $(&amp;rsquo;&amp;lt;img&amp;gt;&amp;rsquo;);
msimg.attr(&amp;lsquo;src&amp;rsquo;,imgurl);
msimg.css({
    &amp;lsquo;position&amp;rsquo;:&amp;lsquo;absolute&amp;rsquo;,
    &amp;lsquo;top&amp;rsquo;:&amp;lsquo;5px&amp;rsquo;,
    &amp;lsquo;left&amp;rsquo;:&amp;lsquo;5px&amp;rsquo;,
});
newms.append(msimg);
var overlay = $(&amp;rsquo;&amp;lt;div&amp;gt;&amp;rsquo;);
overlay.css({
    &amp;lsquo;position&amp;rsquo;:&amp;lsquo;absolute&amp;rsquo;,
    &amp;lsquo;top&amp;rsquo;:&amp;lsquo;4px&amp;rsquo;,
    &amp;lsquo;left&amp;rsquo;:&amp;lsquo;4px&amp;rsquo;,
    &amp;lsquo;width&amp;rsquo;:&amp;lsquo;142px&amp;rsquo;,
    &amp;lsquo;z-index&amp;rsquo;:&amp;lsquo;100&amp;rsquo;,
    &amp;lsquo;height&amp;rsquo;:&amp;lsquo;262px&amp;rsquo;,
    &amp;lsquo;background&amp;rsquo;:&amp;lsquo;rgba(255,255,255,0.15)&amp;rsquo;
});
overlay.hide();
newms.append(overlay);
newms.hover(
    function(){
        overlay.show();
    },
    function(){
        overlay.hide();
    }
);
msul.append(newms);
&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;
コードが書けたら以下のページで適当な形に変換すれば、&lt;br /&gt;
ブックマークレット化できます。&lt;br /&gt;
&lt;a href=&#34;http://userjs.up.seesaa.net/js/bookmarklet.html&#34; target=&#34;_blank&#34; title=&#34;bookmarklet maker&#34;&gt;&lt;strong&gt;bookmarklet maker&lt;br /&gt;
&lt;a href=&#34;http://userjs.up.seesaa.net/js/bookmarklet.html&#34;&gt;http://userjs.up.seesaa.net/js/bookmarklet.html&lt;/a&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>