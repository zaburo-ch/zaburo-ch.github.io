<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Icpc_practice on ZABURO app</title>
    <link>https://zaburo-ch.github.io/categories/icpc_practice/</link>
    <description>Recent content in Icpc_practice on ZABURO app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by ZABURO</copyright>
    <lastBuildDate>Thu, 03 Jul 2014 20:16:51 +0900</lastBuildDate>
    
	<atom:link href="https://zaburo-ch.github.io/categories/icpc_practice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AOJ 2224 Save your cat</title>
      <link>https://zaburo-ch.github.io/post/20140703_2/</link>
      <pubDate>Thu, 03 Jul 2014 20:16:51 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140703_2/</guid>
      <description>フェンスを辺と考え、閉路をなくせばよいので、
閉路をなくす　→　全域木の辺の数を最小にする
壊す長さを最小に　→　長い辺から使っていく
と考えると最小全域木と同じような解き方で解けます。
UnionFind木を使ったクラスカル法で解く場合。
fenceをcostの大きさで降順にソートして、
使わなかったfenceのcostの和を出力します。

プリム法で解く場合。
プリム法は最小全域&amp;rdquo;木&amp;rdquo;をつくるので、森をつくるため、
使われていない頂点に対して何度かプリム法で木を作ります。
(森に対してプリム法を使う方法これしかおもいつかない……)
あと、この実装方法だと同じ辺を何度もみることがあるので
クラスカル法の時のように素直にsumを出力できません。
 </description>
    </item>
    
    <item>
      <title>AOJ 2200 Mr. Rito Post Office</title>
      <link>https://zaburo-ch.github.io/post/20140703_1/</link>
      <pubDate>Thu, 03 Jul 2014 16:17:45 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140703_1/</guid>
      <description>わからなくてぐぐりました。
http://d.hatena.ne.jp/sune2/20120719/1342723320
z[i]からz[i+1]に移動するとき、
陸路のみ 陸路　→　海路　→　陸路  のうち、どちらかのタイプの経路を辿る。
この考え方で実装するとうまくいきます。
dp[i][j]に対して、i-1のとき船があった場所をkとし
z[i-1] →(陸路)→ k →(海路)→ j →(陸路)→ z[i]
と進む事で船を場所jに移し自分はz[i]に移動することができます。
k==jのとき、すなわち船を移動させる必要がないときは、
必ずしもkを経由する必要がないのでz[i-1]からz[i]の陸最短路で良い。
これがわからなくて何回かWAくらった。
 </description>
    </item>
    
    <item>
      <title>AOJ 2249 Road Construction</title>
      <link>https://zaburo-ch.github.io/post/20140703_0/</link>
      <pubDate>Thu, 03 Jul 2014 01:13:49 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140703_0/</guid>
      <description>ある町に最短で行く経路は複数あり、
そのうち最低のコストのものだけ残せば良い。
そこで最短経路で進んだ場合の
ある町とその一つ前の町をつなぐ道をpreに保存し
preのコストが最小になるように更新していく。</description>
    </item>
    
    <item>
      <title>AOJ 0189 Convenient Location</title>
      <link>https://zaburo-ch.github.io/post/20140702_0/</link>
      <pubDate>Wed, 02 Jul 2014 22:34:19 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140702_0/</guid>
      <description>全点最短路問題です。
ワーシャル・フロイド法を用いて解きます。
cost[i][i]を0にするのをお忘れなく！

町の総数が10以下と十分に小さく、負の辺がないため
ひとつずつダイクストラ法で最短距離を求めることもできます。
うまく書けてるかはわかりませんがこんな感じ。
 </description>
    </item>
    
    <item>
      <title>AOJ 0118 Property Distribution</title>
      <link>https://zaburo-ch.github.io/post/20140624_4/</link>
      <pubDate>Tue, 24 Jun 2014 18:40:44 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140624_4/</guid>
      <description>蟻本に載ってたPOJ2386とだいたい同じ。
同じグループを消してく。</description>
    </item>
    
    <item>
      <title>AOJ 0525 Osenbei</title>
      <link>https://zaburo-ch.github.io/post/20140624_3/</link>
      <pubDate>Tue, 24 Jun 2014 18:30:38 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140624_3/</guid>
      <description>0の個数を最大にするとき、どの行をひっくり返すか決めると
ひっくり返すべき列とそれで得られる0の個数が一意的に決まる。
Rが十分に小さいので行のひっくり返し方を全通り試し
そのひっくり返し方に対応する0の個数の最大を出力する。
行のひっくり返し方を再帰で書くとこんな感じ

再帰を使わないで蟻本っぽく解くならこんな感じ？
通ったから一応あってると思う。
 </description>
    </item>
    
    <item>
      <title>AOJ 0121 Seven Puzzle</title>
      <link>https://zaburo-ch.github.io/post/20140624_2/</link>
      <pubDate>Tue, 24 Jun 2014 18:11:41 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140624_2/</guid>
      <description>幅優先探索の問題
まず考えたのは、初期状態から0をどんどん移動させて行く方法。
パズルの状態はstringで表現している。
mapで状態とそこまでの最短距離を対応させ、
mapに存在するかどうかでたどり着いたことがあるかを確認。
ただ、これだとTLEをくらう。

inputは１０００個まで与えられるので、
毎回一から探索していっているのでは無駄が多い。
そもそも、ありえる状態は8!通りしかないから
そろった状態からたどりつけるすべての状態への最短距離を計算しておき
inputに対応した最短距離を出力するほうがいい。
同じようにmapを使って状態と最短距離を対応させる。
 </description>
    </item>
    
    <item>
      <title>AOJ 0033 Ball</title>
      <link>https://zaburo-ch.github.io/post/20140624_1/</link>
      <pubDate>Tue, 24 Jun 2014 17:54:02 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/20140624_1/</guid>
      <description>初めて書いた(?)深さ優先探索
条件がかなり緩いので全探索可能
 </description>
    </item>
    
  </channel>
</rss>