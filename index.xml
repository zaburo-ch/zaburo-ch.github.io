<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZABURO app</title>
    <link>https://zaburo-ch.github.io/</link>
    <description>Recent content on ZABURO app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 29 Jun 2016 13:06:24 +0900</lastBuildDate>
    <atom:link href="https://zaburo-ch.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>t-SNE の逆変換を試してみた</title>
      <link>https://zaburo-ch.github.io/post/tsne-decode/</link>
      <pubDate>Wed, 29 Jun 2016 13:06:24 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/tsne-decode/</guid>
      <description>&lt;p&gt;Parametric t-SNEでt-SNEの変換をニューラルネットで近似することができたので、&lt;br /&gt;
その逆についてもやってみました。&lt;/p&gt;

&lt;p&gt;逆変換と言っても特に難しいことはやっておらず、&lt;br /&gt;
まず普通にBarnes-Hut t-SNEで訓練データを2次元に変換して、&lt;br /&gt;
変換後の座標を入力、変換前の座標を教師データとして教師あり学習を行います。&lt;/p&gt;

&lt;p&gt;今回は、変換後の座標のうち訓練データにないような座標について、&lt;br /&gt;
どのように逆変換されるのかが気になるので汎化性能を高めるためにDropoutを入れました。&lt;/p&gt;

&lt;p&gt;コードは次の通りです。&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/zaburo-ch/591fd26eda1236a1721f5be5eb06ce6a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;t-SNEの結果がこんな感じで、&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/tsne-decode-img01.png&#34; alt=&#34;tsne_result.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;適当に座標を指定して逆変換した結果がこれ&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/tsne-decode-img02.png&#34; alt=&#34;test_result.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;かなり綺麗に逆変換できました。&lt;br /&gt;
deconvolutionを使えばもっとうまく逆変換できるかもしれませんが、&lt;br /&gt;
MNISTの結果としてはこれで十分だと思います。&lt;br /&gt;
なんとかしてこの方針で画像生成とかできないのかなーと思っているのですが、&lt;br /&gt;
まずはグレースケールでない画像をうまく変換できるようにt-SNE側を工夫しなければいけない気がします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parametric t-SNE を Keras で書いた</title>
      <link>https://zaburo-ch.github.io/post/parametric-tsne-keras/</link>
      <pubDate>Tue, 28 Jun 2016 22:01:32 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/parametric-tsne-keras/</guid>
      <description>&lt;p&gt;最近、t-SNEについていろいろ調べいて、その中で&lt;a href=&#34;https://lvdmaaten.github.io/publications/papers/AISTATS_2009.pdf&#34;&gt;Parametric t-SNEの論文&lt;/a&gt;を読みました。&lt;br /&gt;
&lt;a href=&#34;https://lvdmaaten.github.io/publications/papers/JMLR_2008.pdf&#34;&gt;元のt-SNE&lt;/a&gt;は可視化や次元削減の手法としてとても有用なのですが、
変換後の座標を乱数で初期化し、&lt;br /&gt;
KLダイバージェンスが小さくなるように勾配降下で座標を調整していく感じなので、&lt;br /&gt;
初めの乱数次第で配置は大きく変わりますし、別なデータを同じような場所に投射するようなことができません。&lt;/p&gt;

&lt;p&gt;そのため、kaggleなどで前処理として使われる際には、&lt;br /&gt;
訓練データとテストデータをくっつけて変換するという方法が取られています。&lt;br /&gt;
しかし、本来見れないはずのテストデータを訓練データを変換する時にも使うというのはグレーな感じがします。&lt;/p&gt;

&lt;p&gt;そこで、座標を直接調整するのではなく、&lt;br /&gt;
元の座標をパラメトリックな関数で低次元の座標に投射するようにして、&lt;br /&gt;
その関数のパラメータを学習してあげようというのがParametric t-SNEです。&lt;br /&gt;
ここで、関数としてニューラルネットが使われます。&lt;/p&gt;

&lt;p&gt;論文では、RBMを重ねてpre trainingしてfine tuningというのをやっているのですが、&lt;br /&gt;
どうせやるならということで今風にReLUで書きました。&lt;/p&gt;

&lt;p&gt;コードは&lt;a href=&#34;https://github.com/zaburo-ch/Parametric-t-SNE-in-Keras&#34;&gt;ここ&lt;/a&gt;に置いてあります。&lt;br /&gt;
とりあえず論文にも載っているMNISTで試しました。&lt;br /&gt;
100 epoch回すとAWS EC2のg2.2xlargeインスタンスでだいたい10分程度かかります。&lt;/p&gt;

&lt;p&gt;普通のMNISTなので60000件の訓練データと10000件のテストデータがあります。&lt;br /&gt;
学習していく過程が見れたら面白そうだなと思ったので、&lt;br /&gt;
各epoch終了後テストデータに対して変換を行い、散布図を書くようにしました。&lt;/p&gt;

&lt;p&gt;結果はこんな感じ。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mnist_process.gif&#34; alt=&#34;画像&#34; /&gt;&lt;br /&gt;
(なんかgifが吐けなくてmp4をgifに変換したので画質が悪い&amp;hellip;)&lt;/p&gt;

&lt;p&gt;訓練に使っていないデータに対してすごくいい感じに別けられていると思います。&lt;/p&gt;

&lt;p&gt;10~20 epochくらいでいい感じに別けられているので、&lt;br /&gt;
10 epoch毎とかにミニバッチをシャッフルしてあげるともっと良くなるかもしれません。&lt;br /&gt;
一応shuffle_intervalという変数が用意してあって、&lt;br /&gt;
shuffle_interval回のepochが回るとミニバッチがシャッフルされてPが再計算されます。&lt;/p&gt;

&lt;p&gt;Pを計算する部分についてもPython上でですが並列化してあるので少しは早いと思います。&lt;/p&gt;

&lt;p&gt;Convolutional Parametric t-SNEだー！！って言って畳み込み層を使ったものも書いたのですが、&lt;br /&gt;
普通のMLP版とあまり変わらなかったのでお蔵入りしました。&lt;/p&gt;

&lt;p&gt;いつもMNISTしてばかりなのでCIFAR-10でも試してみたのですがあまりうまくいきませんでした。&lt;br /&gt;
そもそもt-SNEでCIFAR-10がうまくいくのが試していないので良くわかりませんが、&lt;br /&gt;
これConvolutionalしてなんとか解決できないかなーと考えています。&lt;/p&gt;

&lt;p&gt;追記：&lt;br /&gt;
&lt;a href=&#34;https://zaburo-ch.github.io/post/tsne-decode/&#34;&gt;逆変換も試しました。&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【C&#43;&#43;】コピーコンストラクタについてのメモ</title>
      <link>https://zaburo-ch.github.io/post/cpp-copy-constructor/</link>
      <pubDate>Sat, 14 May 2016 14:45:45 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/cpp-copy-constructor/</guid>
      <description>&lt;p&gt;関数内で作成したオブジェクトをreturnして代入した場合に&lt;br /&gt;
コピーが起こってしまうのではといつも不安になっているので試した。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/zaburo-ch/d1f55b864bd005a5c9764f97c593306d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;おこらなかった！嬉しい！&lt;br /&gt;
たぶんいい感じにポインタ的なものを差し替えてくれているのだろう。&lt;br /&gt;
コンパイラは g++ (Homebrew gcc 4.9.2_1) 4.9.2&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FaxOCR を CNN でやってみた</title>
      <link>https://zaburo-ch.github.io/post/faxocr/</link>
      <pubDate>Wed, 13 Apr 2016 11:32:33 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/faxocr/</guid>
      <description>&lt;p&gt;せっかくKerasを使ってみたのでCNNもやってみたいということで、&lt;br /&gt;
&lt;a href=&#34;https://sites.google.com/site/faxocr2010/systemrequirements/kocr/mnist&#34;&gt;FaxOCR&lt;/a&gt;というMNISTと同形式のデータセットで手書き文字認識をやってみました。&lt;br /&gt;
ソースコードは&lt;a href=&#34;https://github.com/zaburo-ch/FaxOCR/blob/master/code/faxmnist_keras.py&#34;&gt;ここ&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;このデータセットではtrain setがかなり小さいので、&lt;br /&gt;
まず最初に適当に拡大縮小や回転をして画像データの枚数を11倍に(1枚から10枚生成)しました。&lt;/p&gt;

&lt;p&gt;CNNのアーキテクチャは&lt;a href=&#34;https://github.com/toshi-k/kaggle-digit-recognizer/blob/master/2_model.lua&#34;&gt;toshi-kさんのコード&lt;/a&gt;を参考にして適当に設定しました。&lt;br /&gt;
ただ、データセットが小さくて過学習してしまいそうだなーと思ったので、&lt;br /&gt;
上記のものに比べて小さいネットワークになっています。&lt;/p&gt;

&lt;p&gt;入力したテンソルがどの時点でどのサイズになっているか確認する方法がわからなかったので、&lt;br /&gt;
ZeroPaddingなどがこれでうまくいっているのかわかりませんが、&lt;br /&gt;
入力(1, 28, 28) -&amp;gt; (64, 12, 12) -&amp;gt; (64, 12, 12) -&amp;gt; (256, 10, 10) -&amp;gt; (128) -&amp;gt; (10)出力&lt;br /&gt;
という形になっていると嬉しいなくらいの感じで書いています。&lt;br /&gt;
&lt;a href=&#34;http://ultraist.hatenablog.com/entry/2014/08/23/144007&#34;&gt;こういう風に&lt;/a&gt;デバッグする方法が知りたい&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;結果は次の通りです。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dataset&lt;/th&gt;
&lt;th&gt;正答率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;train&lt;/td&gt;
&lt;td&gt;99.5%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;valid&lt;/td&gt;
&lt;td&gt;99.1%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;td&gt;93.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;増やしたデータセットのうち90%をtrain、10%をvalidとし、&lt;br /&gt;
trainで訓練してvalidが最も高くなるところで止まるようになっています。&lt;br /&gt;
もとのデータセット全部をtrainにしてtestが高くなるところで止めるともう少し精度が上がります。(&lt;a href=&#34;https://github.com/zaburo-ch/FaxOCR/blob/master/code/faxmnist_keras_testval.py&#34;&gt;これ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;GPUマシンを持っていないので学習に時間がかかりすぎりてあんまり色々試せない&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;[追記]&lt;br /&gt;
データセットのバージョンは&lt;a href=&#34;https://sites.google.com/site/faxocr2010/systemrequirements/kocr/mnist/faxocr-numbers-20160411c.zip&#34;&gt;faxocr-numbers-20160411c.zip&lt;/a&gt;のものです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonで Neural Fitted Q Iteration を実装する</title>
      <link>https://zaburo-ch.github.io/post/neural-fitted-q-iteration/</link>
      <pubDate>Thu, 17 Mar 2016 13:37:58 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/neural-fitted-q-iteration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/mlp/&#34;&gt;前々回に実装した多層パーセプトロン&lt;/a&gt;と&lt;a href=&#34;https://zaburo-ch.github.io/post/inverted-pendulum/&#34;&gt;前回実装した倒立振子のシミュレータ&lt;/a&gt;を用いて、&lt;br /&gt;
&lt;a href=&#34;http://ml.informatik.uni-freiburg.de/_media/publications/rieecml05.pdf&#34;&gt;Neural Fitted Q Iteration&lt;/a&gt;(NFQ)の実験を行います。&lt;/p&gt;

&lt;p&gt;NFQはQ学習の最適行動価値関数を多層パーセプトロンを用いて近似する手法の一つで、&lt;br /&gt;
学習中にはデータを追加せず、事前に集められたデータのみから学習を行います。&lt;/p&gt;

&lt;p&gt;コードはこんな感じ。MLPはkerasで構築しました。&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/zaburo-ch/f2f61a94ee722447d2d7.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;mはepisodeの個数にあたる変数になっていて、&lt;br /&gt;
[50, 100, 150, 200, 300, 400]の各m対して、50回実験を行うようになっています。&lt;br /&gt;
実験の大まかな流れは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;make_episodes(m)でm個のepisodeを作る&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;多層パーセプトロンを構築&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Neural Fitted Q Iterationを実行&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;倒立振子を立たせるタスクを実行&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止するまでの時間を記録(t&amp;lt;299なら失敗、t==299なら成功)&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という感じです。肝心の3.では、&lt;br /&gt;
episodesの中からpattern_set_size個ずつepisodesを取り出し、&lt;br /&gt;
その中の各cycleから入力xと教師信号tを作成して、&lt;br /&gt;
多層パーセプトロンをこれにfitさせるのを繰り返すことで学習を行っています。&lt;br /&gt;
episodes1周だけではうまくタスクを成功させることができなかったので、&lt;br /&gt;
毎回取り出す順番をランダムに変えてepisodesを5周させるようにしています。&lt;/p&gt;

&lt;p&gt;実験結果は次のようになりました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;m&lt;/th&gt;
&lt;th&gt;成功した回数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;25 / 50 (50%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;41 / 50 (82%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;43 / 50 (86%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;43 / 50 (86%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;48 / 50 (96%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;46 / 50 (92%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;m = 50 の場合については論文とほぼ同程度成功できています。&lt;br /&gt;
しかし、それ以外の場合では論文の結果よりもやや悪い数字が出てしまっています。&lt;br /&gt;
特に m &amp;gt;= 200 では100%となるらしいのですが、100%は出ませんでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rpropを使うところをSGDでやったこと(sigmoid関数がフラットになる範囲で学習が停滞する)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;episodesの周回数(5)やpattern_set_size(=m/10)をテキトーに決めたこと&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;fitの時のepoch数が1000で固定されていること&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりかなが原因なのかなと思っています。&lt;br /&gt;
この辺りをちゃんと設定すれば100%も出せると思うのですが、&lt;br /&gt;
まあそれほど悪くない結果が出ているのでひとまずこれで良いことにします。&lt;/p&gt;

&lt;p&gt;倒立振子のアニメーションは以下のような感じ。&lt;br /&gt;
コスト関数が単純(倒れたら1、倒れないなら0)なため、&lt;br /&gt;
直立した状態でキープしようとするのではなく、&lt;br /&gt;
倒れそうになってから直そうとするので台車ごとすっ飛んで行きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/pendulum_m50_fail.gif&#34; alt=&#34;m=50,失敗&#34; /&gt;
m = 50, 失敗&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/pendulum_m50_success.gif&#34; alt=&#34;m=50,成功&#34; /&gt;
m = 50, 成功(gifは10秒で打ち切り)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/pendulum_m400_fail.gif&#34; alt=&#34;m=400,失敗&#34; /&gt;
m = 400, 失敗&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/pendulum_m400_success.gif&#34; alt=&#34;m=400,成功&#34; /&gt;
m = 400, 成功(gifは10秒で打ち切り)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonで 倒立振子のシミュレータ を実装する</title>
      <link>https://zaburo-ch.github.io/post/inverted-pendulum/</link>
      <pubDate>Tue, 15 Mar 2016 21:00:44 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/inverted-pendulum/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ml.informatik.uni-freiburg.de/_media/publications/rieecml05.pdf&#34;&gt;Neural Fitted Q Iteration&lt;/a&gt;の実験で使う倒立振子のシミュレータを書きました。&lt;br /&gt;
論文ではCLSquareというシステムを使って実験が行われているのですが、&lt;br /&gt;
頑張ってインストールしたものの上手く動かせなかったので自分で書きました。&lt;/p&gt;

&lt;p&gt;倒立振子の運動方程式については&lt;a href=&#34;http://www.robot.mach.mie-u.ac.jp/~nkato/class/sc/Invpend_eq3.pdf&#34;&gt;こちら&lt;/a&gt;のスライドが詳しいです。&lt;br /&gt;
今回は摩擦を無視するのでスライドでいう B と C が 0 になります。&lt;/p&gt;

&lt;p&gt;台車の重さやポールの長さなどの各種定数は、NFQの論文に倣い、&lt;br /&gt;
&lt;a href=&#34;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=ja&amp;amp;user=VqHiIg8AAAAJ&amp;amp;citation_for_view=VqHiIg8AAAAJ:u5HHmVD_uO8C&#34;&gt;これ&lt;/a&gt;のInverted Pendulumの実験と同じにしました。&lt;/p&gt;

&lt;p&gt;コードはこんな感じ。
&lt;script src=&#34;https://gist.github.com/zaburo-ch/ebeb65b7b1e97f2ece80.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;アクションは[-50N, 50N, 0N]の3種類で、[0, 1, 2]で表現しました。&lt;br /&gt;
do_action(a)でアクションが実行され t だけ時間が進みます。&lt;/p&gt;

&lt;p&gt;matplotlibでビジュアライズできるようにしたので、&lt;br /&gt;
実行すると次のようなアニメーションが表示されます。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/pendulum01.gif&#34; alt=&#34;inverted pendulum&#34; /&gt;&lt;/p&gt;

&lt;p&gt;加速度がこの式で与えられるのは微分してみたらわかるけど、&lt;br /&gt;
速度や位置(角速度や角度)をどうやって更新していいのかわからなかったので、&lt;br /&gt;
tが小さければ高校物理のvt+&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;*at^2で大丈夫でしょって感じで&lt;br /&gt;
t_sum回ループ回して細かく更新することでそれっぽい結果を得ました。&lt;/p&gt;

&lt;p&gt;ちゃんと検索してみると&lt;a href=&#34;https://searchcode.com/codesearch/view/34802371/&#34;&gt;C言語での実装&lt;/a&gt;が見つかったので、&lt;br /&gt;
これを真似してupdate_stateを書き換えてみるとこんな感じ。
&lt;script src=&#34;https://gist.github.com/zaburo-ch/70f16749efeef5beb95e.js&#34;&gt;&lt;/script&gt;
物理が分からない自分が書いたコードより安心なので、実験ではこっちを使おうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonで 多層パーセプトロン を実装する</title>
      <link>https://zaburo-ch.github.io/post/mlp/</link>
      <pubDate>Sat, 20 Feb 2016 01:29:30 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/mlp/</guid>
      <description>&lt;p&gt;前回は古典的Q学習を実装しましたが、次はニューラルネットを用いたQ学習として、&lt;br /&gt;
&lt;a href=&#34;http://ml.informatik.uni-freiburg.de/_media/publications/rieecml05.pdf&#34;&gt;Neural Fitted Q Iteration&lt;/a&gt;を使ったQ学習を実装しようと考えています。&lt;/p&gt;

&lt;p&gt;今回はその前の勉強として、&lt;br /&gt;
誤差逆伝播法を用いた多層パーセプトロンをNumPyだけで実装してみます。&lt;br /&gt;
誤差逆伝播法についてはこちらのスライドが詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/1T0PJeFTRBMnCG?startSlide=32&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;br /&gt;
&lt;a href=&#34;//www.slideshare.net/weda654/3-45366686&#34; title=&#34;わかりやすいパターン認識_3章&#34; target=&#34;_blank&#34;&gt;わかりやすいパターン認識_3章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コードはこんな感じ。
&lt;script src=&#34;https://gist.github.com/zaburo-ch/7ab05a6dda71b5ccfe4f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;活性化関数は全てシグモイド関数で、コスト関数は残差の平方和を用いました。&lt;br /&gt;
各層はforwardで出力を計算して、&lt;br /&gt;
backwardで前の層の誤差を計算しつつ W や b の更新を行います。&lt;br /&gt;
tanhなどの層も同じような関数を実装してMLPのinitを適宜変えれば使える(はず)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deeplearning.net/tutorial/mlp.html&#34;&gt;DeepLearningTutorialsのMLPのコード&lt;/a&gt;っぽくしたくて、&lt;br /&gt;
&lt;a href=&#34;http://blog.yusugomori.com/post/40250499669/python%E3%81%AB%E3%82%88%E3%82%8Bdeep-learning%E3%81%AE%E5%AE%9F%E8%A3%85deep-belief-nets-%E7%B7%A8&#34;&gt;DeepLearningTutorialsのDBNをNumPyで実装した方のコード&lt;/a&gt;とか、&lt;br /&gt;
&lt;a href=&#34;http://aidiary.hatenablog.com/entry/20140201/1391218771&#34;&gt;NumPyでMLPを実装を実装した方のコード&lt;/a&gt;などを参考に書きました。&lt;/p&gt;

&lt;p&gt;各所に載っている式を見る限りは出力層も活性化関数を使うっぽいんですが、&lt;br /&gt;
Chainerの多層パーセプトロンのサンプルをはじめとして、&lt;br /&gt;
出力層で線形変換するだけ(活性化関数を使わない)のものが結構あって混乱しました。&lt;br /&gt;
たぶんシグモイド関数やtanhだと出力できる範囲が狭くて不便なので&lt;br /&gt;
出力層だけ恒等関数使ってるんだろうという感じでとりあえず考えています。&lt;br /&gt;
先のNFQの論文で、全ての層でシグモイドを使ったみたいなことが書いてあったので、&lt;br /&gt;
今回は出力層にもシグモイド関数を使うことにしています。&lt;br /&gt;
あと出力層での誤差も、出力層の活性化関数の微分をかけるのかどうかがわからなくて&lt;br /&gt;
結構悩みましたが、スライドの式に従ってかけることにしました。&lt;/p&gt;

&lt;p&gt;また、確率的勾配降下法(SGD)でミニバッチを使った学習ができるように書きましたが、&lt;br /&gt;
ミニバッチを使う時に W や b の更新をどうやるのかがよくわからなくて、&lt;br /&gt;
結局ループ回して学習パターン1つずつ使って更新を行うようにしました。&lt;br /&gt;
出力層の時点で誤差の和をとってそれを伝播するんだと思ったのですが、&lt;br /&gt;
そしたらそれと掛け合わせる前の層の出力はどうするんだ！？ってなって&lt;br /&gt;
結局わからず、まあ結局やってること大体一緒でしょってことでこの形にしました。&lt;/p&gt;

&lt;p&gt;結果はこんな感じになります。赤が教師信号、青がMLPの出力で、&lt;br /&gt;
左が1000回反復した場合、右が10000回反復した場合です。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_1000.png&#34; width=&#34;300px&#34; /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_10000.png&#34; width=&#34;300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;たぶん学習できていると思うのですが、&lt;br /&gt;
いまいちうまくいっているのか確証が持てなかったので、&lt;br /&gt;
同じネットワークをChainerでも実装してみました。&lt;/p&gt;

&lt;p&gt;コードは&lt;a href=&#34;https://gist.github.com/zaburo-ch/8f4fe27e898b42a38635&#34;&gt;ここ&lt;/a&gt;。Tutorialのものをちょっといじっただけです。&lt;/p&gt;

&lt;p&gt;結果は次の通り。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_chainer_1000.png&#34; width=&#34;300px&#34; /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_chainer_10000.png&#34; width=&#34;300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Chainerの方が若干うまく近似できていますが、&lt;br /&gt;
概ね同じような感じの結果が得られたので、自分で書いた方も大丈夫なはず。&lt;/p&gt;

&lt;p&gt;実行時間はNumPyだけの方がかなり早いです。&lt;br /&gt;
ただ自分で微分する必要もなく適当に層つなぐだけで出来ちゃったのでChainerすごい&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2016/03/15 追記&lt;/strong&gt;&lt;br /&gt;
Kerasでも試してみました。コードは&lt;a href=&#34;https://gist.github.com/zaburo-ch/13b9bfc221246b319a19&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;結果はだいたい同じような感じ&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_keras_1000.png&#34; width=&#34;300px&#34; /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/mlp_approximate_abs_keras_10000.png&#34; width=&#34;300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;後ろでTheanoが使われていることもありかなり速いです。&lt;br /&gt;
まだMLP書いただけなので、もっと大規模なモデルを実装するときにどうなるかはわかりませんが、&lt;br /&gt;
モデルの記述の仕方や、sklearnっぽいfit・predictの書き方など、&lt;br /&gt;
結構書きやすいように感じました。もっと使ってみたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonで Q学習 を実装する</title>
      <link>https://zaburo-ch.github.io/post/q-learning/</link>
      <pubDate>Sun, 14 Feb 2016 14:28:18 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/q-learning/</guid>
      <description>&lt;p&gt;Deep Q-Networkについて調べてみたら面白い記事を見つけました。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/Ugo-Nama/items/08c6a5f6a571335972d5&#34;&gt;DQNの生い立ち　＋　Deep Q-NetworkをChainerで書いた&lt;br /&gt;
http://qiita.com/Ugo-Nama/items/08c6a5f6a571335972d5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事を読んで、Deep Q-Networkが&lt;br /&gt;
Q学習 -&amp;gt; Q-Network -&amp;gt; Deep Q-Network という流れ生まれたものだということがわかりました。&lt;br /&gt;
この流れをPythonで実装しながら辿ってみようと思います。&lt;/p&gt;

&lt;p&gt;今回はQ学習を実装します。&lt;br /&gt;
Q学習について下記のページに詳しく載っているので割愛します。&lt;br /&gt;
&lt;a href=&#34;http://www.sist.ac.jp/~kanakubo/research/reinforcement_learning.html&#34;&gt;強化学習&lt;br /&gt;
http://www.sist.ac.jp/~kanakubo/research/reinforcement_learning.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://sysplan.nams.kyushu-u.ac.jp/gen/edu/RL_intro.html&#34;&gt;強化学習とは？&lt;br /&gt;
http://sysplan.nams.kyushu-u.ac.jp/gen/edu/RL_intro.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず、Q学習で適応する環境として次のような簡単な環境を考えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;環境の状態は、&#39;A&#39;または&#39;B&#39;からなる長さ8の文字列で表され、  
その文字列にはある法則により得点がつけられる。  
プレイヤーはその法則についての知識を予め持たないが、  
文字列中の任意の1文字を選んで&#39;A&#39;または&#39;B&#39;に置き換えることができ、  
その結果、その操作による得点の変化量を報酬として受け取る。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たぶんマルコフ決定過程になっていると思います。マルコフ性、&lt;a href=&#34;http://ibisforest.org/index.php?%E3%82%A8%E3%83%AB%E3%82%B4%E3%83%BC%E3%83%89%E6%80%A7&#34;&gt;エルゴート性&lt;/a&gt;も持つはず。&lt;/p&gt;

&lt;p&gt;文字列に得点をつける法則はなんでも良いのですが、&lt;br /&gt;
今回は、特定の文字列(単語)に次のように得点を割り当てて、&lt;br /&gt;
{&amp;ldquo;A&amp;rdquo;: 1, &amp;ldquo;BB&amp;rdquo;: 1, &amp;ldquo;AB&amp;rdquo;: 2, &amp;ldquo;ABB&amp;rdquo;: 3, &amp;ldquo;BBA&amp;rdquo;: 3, &amp;ldquo;BBBB&amp;rdquo;: 4}&lt;br /&gt;
文字列中に含まれる単語の合計得点を文字列の得点とするということにします。&lt;br /&gt;
例えば&amp;rdquo;AAAAAAAA&amp;rdquo;なら8点(1 * 8)、&amp;rdquo;AAAAAAAB&amp;rdquo;なら9点(1 * 7 + 2)です。&lt;/p&gt;

&lt;p&gt;環境のとりうる状態は長さ8のそれぞれに&amp;rsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;の2通りあるので2^8通りあり、&lt;br /&gt;
アクションは、何もしないのと、位置1~8のそれぞれを&amp;rsquo;A&amp;rsquo;または&amp;rsquo;B&amp;rsquo;なのでを計17通りあります。&lt;br /&gt;
今回のコードでは状態は文字列、アクションは整数(0~16)で管理します。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/zaburo-ch/9ee5fd731d40d47c82ad.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;先述した強化学習の記事では、Q学習の学習中に、&lt;br /&gt;
一定の回数遷移を繰り返した後、状態をs0に戻すものとそうでないものがあり、&lt;br /&gt;
どちらを採用するか悩んだので QLearning(n_rounds, t_max)として&lt;br /&gt;
2重のループにすることで一応どちらの方法でも実行できるようにしました。&lt;/p&gt;

&lt;p&gt;これを実行結果はこんな感じ&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/q_learning_figure_1.png&#34; alt=&#34;/images/q_learning_figure_1.png&#34; /&gt;
軸のラベルを書き忘れていますが、&lt;br /&gt;
横軸が外側のループが回った数で、縦軸がそれまでに学習したQを使ってt_max回遷移した時のスコアですね。&lt;br /&gt;
&amp;ldquo;ABBBBBBB&amp;rdquo;に遷移して終わるのとき最大値28をとるのですが、&lt;br /&gt;
約900セット(t_max * 900回)の学習でそれを実現する遷移ができるようになっています。&lt;/p&gt;

&lt;p&gt;この問題だとイマイチQ学習のイメージがつかみにくいので、&lt;br /&gt;
素直に最短路問題とかにしとけば良かったなーと思っています。&lt;/p&gt;

&lt;p&gt;最短路問題を使ったわかりやすい例はこちら&lt;br /&gt;
&lt;a href=&#34;http://d.hatena.ne.jp/poor_code/20090628/1246176165&#34;&gt;Q学習による最短経路学習 - poor_codeの日記&lt;br /&gt;
http://d.hatena.ne.jp/poor_code/20090628/1246176165&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Androidアプリ「スマホさがし」公開しました</title>
      <link>https://zaburo-ch.github.io/post/release-smapho-sagashi/</link>
      <pubDate>Wed, 09 Dec 2015 17:22:31 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/release-smapho-sagashi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://zaburo-ch.github.io/images/smapho_sagashi_promo1.jpg&#34; alt=&#34;プロモ画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結構前の話ですが、「スマホさがし」というAndroidアプリを公開しました。&lt;br /&gt;
Webページから紛失したスマホのアラームを鳴らせるという機能だけの簡単なアプリです。&lt;/p&gt;

&lt;p&gt;最近家でスマホをなくすことが多く、同様のアプリを入れようと思ったのですが、&lt;br /&gt;
スマホ無くて探してるのに「SMSで操作できます」みたいなアプリとか、&lt;br /&gt;
Webページからの操作に何でも彼んでも権限与えまくってる恐怖のアプリとかしか見つからなかったので、&lt;br /&gt;
自分用に最小限のものをサクッと作ってみました。&lt;/p&gt;

&lt;p&gt;Androidアプリにハマっていたのが2年前くらいなのですが、&lt;br /&gt;
今はEclipseじゃなくてAndroidStudioになってて便利だし、&lt;br /&gt;
適当に作ってもそれなりのデザインになるように設計されてるしで感動ものでした。&lt;/p&gt;

&lt;p&gt;ということで「スマホさがし」よろしくお願いします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.github.zaburo_ch.smaphosagashi&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://developer.android.com/images/brand/en_generic_rgb_wo_45.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Forexiteから為替データを取得するスクリプトを書いた【Python】</title>
      <link>https://zaburo-ch.github.io/post/get-exchange-data-from-forexite/</link>
      <pubDate>Thu, 08 Oct 2015 22:26:21 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/get-exchange-data-from-forexite/</guid>
      <description>&lt;p&gt;書きました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.forexite.com/&#34;&gt;Forexite&lt;/a&gt;から分足データをダウンロードしてきて&lt;br /&gt;
解凍したものを適当な形にpandasで加工してcsvで出力する、というのを n 日分行います。&lt;br /&gt;
ひとまず n は200にしているので、そのままコピペして実行すれば200日分のデータが集まるはずです。&lt;/p&gt;

&lt;p&gt;Forexiteのデータは１日毎に分けられているのですが、&lt;br /&gt;
これから使う用途ではその方が都合が良いのでそのままにしてます。&lt;/p&gt;

&lt;p&gt;コードは以下の通り。&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/zaburo-ch/2ad144ae43a10844a646.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ブログ用に処理を綺麗に関数にまとめたかったのですが、&lt;br /&gt;
逆に強引な書き方が増えてしまいました&amp;hellip;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pandasで為替データを扱う【Python】</title>
      <link>https://zaburo-ch.github.io/post/handle-exchange-data-by-pandas/</link>
      <pubDate>Thu, 08 Oct 2015 00:59:54 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/handle-exchange-data-by-pandas/</guid>
      <description>&lt;p&gt;データ分析を本格的にやっていきたいと考えていて、&lt;br /&gt;
その足がかりとしてpandasの使い方を勉強をしています。&lt;/p&gt;

&lt;p&gt;今回は為替データを扱ってみたいと思います。&lt;br /&gt;
&lt;a href=&#34;https://www.forexite.com/&#34;&gt;Forexite&lt;/a&gt;というサイトで分足データが無料でダウンロードできるので、これを使います。&lt;br /&gt;
さっそく&lt;a href=&#34;https://www.forexite.com/free_forex_quotes/2015/10/061015.zip&#34;&gt;こちら(2015年10月6日分)&lt;/a&gt;からzipをダウンロードしてきて解凍すると&lt;br /&gt;
色々な通貨のデータが一つのtxtファイルにまとまっています。&lt;/p&gt;

&lt;p&gt;USDJPYのデータを抽出し5分足の終値と&lt;br /&gt;
ボリンジャーバンド、指数加重移動平均をプロットするところまでやります。&lt;/p&gt;

&lt;p&gt;IPythonで試行錯誤しながらやったものをまとめたコードが以下の通りです。
&lt;script src=&#34;https://gist.github.com/zaburo-ch/12e9ada46ee2b7a16e5f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;こんな感じのグラフが表示されます。&lt;br /&gt;
&lt;img src=&#34;https://zaburo-ch.github.io/images/pandas_study_01.png&#34; alt=&#34;図1&#34; /&gt;&lt;br /&gt;
&amp;lt;DTYYYYMMDD&amp;gt;と&amp;lt;TIME&amp;gt;をマージする部分の強引さが酷いですね。&lt;br /&gt;
きっともっとスマートにできるんだろうなぁ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go言語でリダイレクト先のURLを取得する</title>
      <link>https://zaburo-ch.github.io/post/get-redirect-url-in-go/</link>
      <pubDate>Sat, 12 Sep 2015 00:08:08 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/get-redirect-url-in-go/</guid>
      <description>

&lt;p&gt;タイトルのとおりGoでリダイレクト先のURLを取得します。&lt;br /&gt;
Goでは普通にClientを使ってGETやらHEADリクエストを行うと、&lt;br /&gt;
リダイレクトがあったとき自動的にリダイレクト先の内容をとってくるようになっているので、&lt;br /&gt;
今回のようにリダイレクト先に行く必要の無い特殊なケースでは、&lt;br /&gt;
リダイレクト時の動作を変更するか、より低レベルのメソッドを利用することで対応します。&lt;/p&gt;

&lt;p&gt;参考にしたページ&lt;br /&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/23297520/how-can-i-make-the-go-http-client-not-follow-redirects-automatically&#34;&gt;rest - How Can I Make the Go HTTP Client NOT Follow Redirects Automatically? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;リダイレクト時の動作を変更する:7a97346472b573b7ec258a58d0cd30e4&#34;&gt;リダイレクト時の動作を変更する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Client.CheckRedirect func(req *Request, via []*Request) error&lt;/code&gt;&lt;br /&gt;
がリダイレクト時の動作を定めているためこれを変更します。&lt;br /&gt;
CheckRedirectがerrorを返すと、Clientはリダイレクト先を取得する代わりに&lt;br /&gt;
前のレスポンスの内容とそのerror(wrapped in a url.Error)を返します。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/zaburo-ch/98a1a0bfef742111020b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;30行目では型アサーションを用いてRedirectAttemptedErrorが起こったかを確認しています。&lt;br /&gt;
HEADリクエストの場合もBodyをcloseしなきゃいけないのかはちょっとわかりませんが、&lt;br /&gt;
&lt;a href=&#34;http://golang.org/pkg/net/http/#Response&#34;&gt;これ&lt;/a&gt;を見る限りは必要そうなのでcloseしています。&lt;/p&gt;

&lt;h2 id=&#34;より低レベルのメソッドを利用する:7a97346472b573b7ec258a58d0cd30e4&#34;&gt;より低レベルのメソッドを利用する&lt;/h2&gt;

&lt;p&gt;http.TransportのRoundTripメソッドを使ってリクエストを行います。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/zaburo-ch/99e58cf8fa9d3d11bd6a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Transportの設定難しそうだったのでひとまずhttp.DefaultTransport使ってます。&lt;br /&gt;
ClientはStatusCodeが301,302,303,307の時にリダイレクトの処理を行うので、&lt;br /&gt;
たぶんこの20行目の書き方でも上手く行くはずです。&lt;br /&gt;
複数の値のどれかと一致すればtrueみたいな書き方がわからなかったので&lt;br /&gt;
愚直に4つ書いて並べてあります。なんかいい方法あるんでしょうか。&lt;br /&gt;
Pythonみたいにin演算子とかあればいいんですけどね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Picker API を使ってみる</title>
      <link>https://zaburo-ch.github.io/post/quick-start-google-picker-api/</link>
      <pubDate>Thu, 06 Aug 2015 01:41:08 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/quick-start-google-picker-api/</guid>
      <description>&lt;p&gt;Google Driveのファイルを利用できるPicker APIを
GAE上で使ってみたのでメモっておきます。&lt;br /&gt;
クライアントIDが何かとか詳しい話は抜きにしてとにかく動かすまで。&lt;/p&gt;

&lt;p&gt;こちらのガイドに従ってやります。&lt;br /&gt;
&lt;a href=&#34;https://developers.google.com/picker/docs/&#34;&gt;https://developers.google.com/picker/docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まずPciker APIを有効にします。&lt;br /&gt;
&lt;a href=&#34;https://console.developers.google.com/&#34;&gt;Google Developers Console&lt;/a&gt;にログインしてAPIを使うプロジェクトのページに入ります。&lt;br /&gt;
左側のサイドバーの「APIと認証」-&amp;gt;「API」を選択。&lt;br /&gt;
Pickerとかで検索して「Google Picker API」を選択しAPIを有効にします。&lt;/p&gt;

&lt;p&gt;次にクライアントIDとAPIキーを作成します。&lt;br /&gt;
「APIと認証」-&amp;gt;「認証情報」から2つとも作成できます。&lt;/p&gt;

&lt;p&gt;クライアントIDの方はウェブアプリケーションを選択し、&lt;br /&gt;
「JavaScript 生成元」にはAPIを使用するページのオリジンを指定。&lt;br /&gt;
今回はlocalhost:8080でも動いて欲しいので次の二つを指定しました。&lt;br /&gt;
http://プロジェクトID.appspot.com/&lt;br /&gt;
&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;br /&gt;
リダイレクトURLはよくわからなかった。とりあえず、&lt;br /&gt;
&lt;a href=&#34;http://localhost:8080/oauth2callback&#34;&gt;http://localhost:8080/oauth2callback&lt;/a&gt;&lt;br /&gt;
みたいな感じで指定してるけどたぶん意味ないです。&lt;/p&gt;

&lt;p&gt;APIキーの方はブラウザキーを選択。&lt;br /&gt;
リファラーはクライアントIDの時と同じ感じで&lt;br /&gt;
http://プロジェクトID.appspot.com/*&lt;br /&gt;
&lt;a href=&#34;http://localhost:8080/*&#34;&gt;http://localhost:8080/*&lt;/a&gt;&lt;br /&gt;
としました。&lt;/p&gt;

&lt;p&gt;これでクライアントIDとAPIキーが取得できたので&lt;br /&gt;
先のガイドの「The &amp;ldquo;Hello World&amp;rdquo; Application」のとおりにページを用意して&lt;br /&gt;
developerKeyとclientIdを書き換えればとりあえず動きます。&lt;/p&gt;

&lt;p&gt;このスクリプトの流れは、&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo; src=&amp;ldquo;&lt;a href=&#34;https://apis.google.com/js/api.js?onload=onApiLoad&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#34;&gt;https://apis.google.com/js/api.js?onload=onApiLoad&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
でGoogle API Loader scriptを読み込む。&lt;br /&gt;
読み込みが終わると onload=onApiLoad で指定しているonApiLoadが呼ばれて&lt;br /&gt;
authとpickerのスクリプトが読み込まれる。&lt;br /&gt;
両方読み込まれるとcreatePicker()の内容が実行されて&lt;br /&gt;
pickerのインスタンスが作成、可視化される。&lt;br /&gt;
という感じになっています。&lt;/p&gt;

&lt;p&gt;pickerの生成時にコールバック用の関数とかいろいろ指定できるのですが、&lt;br /&gt;
addView()の部分がキモで、ここで表示されるファイルの種類を指定しています。&lt;br /&gt;
指定方法についてはガイドの「Showing Different Views」に表が載っていて&lt;br /&gt;
サンプルの通りだとPicasaのWeb Albumsにある写真が表示されるようになっています。&lt;/p&gt;

&lt;p&gt;こことscopeを表に従って変えればGoogle Driveのアイテムとかも表示できるのですが&lt;br /&gt;
全部取得してしまうとごちゃごちゃになるのでsetMimeTypesでMIME Typeを指定します。&lt;br /&gt;
MIME Typeは&lt;a href=&#34;http://www.plala.or.jp/access/community/phps/mime.html&#34;&gt;MIME Type 一覧表&lt;/a&gt;を見て適当に。&lt;br /&gt;
例えばpdfだけを表示するようにしたい場合は次のようにします。&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;function createPicker() {
    var view = new google.picker.View(google.picker.ViewId.DOCS);
    view.setMimeTypes(&amp;ldquo;application/pdf&amp;rdquo;);
    if (pickerApiLoaded &amp;amp;&amp;amp; oauthToken) {
        var picker = new google.picker.PickerBuilder().
            addView(view).
            setLocale(&amp;lsquo;ja&amp;rsquo;).
            setOAuthToken(oauthToken).
            setDeveloperKey(developerKey).
            setCallback(pickerCallback).
            build();
        picker.setVisible(true);
    }
}
&lt;/code&gt;&lt;/pre&gt;
setLocale(&amp;lsquo;ja&amp;rsquo;)で日本語で表示するよう指定することができます。&lt;/p&gt;

&lt;p&gt;Pcikerで取得した内容はsetCallbackで指定した関数にJSONで渡されるので&lt;br /&gt;
これを適当に処理してやればおっけーです。&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Daniel15/5994054&#34;&gt;Google Drive File Picker Example&lt;/a&gt;&lt;br /&gt;
Gistにもっと工夫したものがあったのでこれも参考にするといいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASOBI&#43;のソースコードを公開しました。</title>
      <link>https://zaburo-ch.github.io/post/publishing_asobi_plus/</link>
      <pubDate>Mon, 29 Jun 2015 00:28:20 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/post/publishing_asobi_plus/</guid>
      <description>&lt;p&gt;去年の10月頃公開した&lt;a href=&#34;http://asobi.herokuapp.com/&#34;&gt;ASOBI+&lt;/a&gt;ですが、&lt;br /&gt;
最近はブラッシュアップすることもなくなり放置状態になっていたので、&lt;br /&gt;
Githubでソースコード、アイコン等を公開しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zaburo-ch/asobi_plus&#34;&gt;zaburo-ch/asobi_plus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Herokuで動いているものをほぼそのまま公開した形ですが、&lt;br /&gt;
APIkeyの部分だけ変えてあるのでそこ変えないと動きません。&lt;/p&gt;

&lt;p&gt;WebRTCを使ったWebアプリ等を作る際に役立てて頂ければと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ポートフォリオ</title>
      <link>https://zaburo-ch.github.io/portfolio/</link>
      <pubDate>Sat, 27 Jun 2015 02:10:24 +0900</pubDate>
      
      <guid>https://zaburo-ch.github.io/portfolio/</guid>
      <description>

&lt;h2 id=&#34;コンテスト等への参加歴:08e0386ce22622b66038f29292f02cb1&#34;&gt;コンテスト等への参加歴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://icpc.iisf.or.jp/2014-waseda/&#34;&gt;ACM-ICPC 2014 アジア地区予選東京大会&lt;/a&gt;出場&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://recruit-jinji.jp/code_fes2015/&#34;&gt;CODE FESTIVAL 2015本戦&lt;/a&gt;出場&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dwango.co.jp/saiyo/procon2016/&#34;&gt;dwangoプログラミングコンテスト本選&lt;/a&gt;出場&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/c/bnp-paribas-cardif-claims-management&#34;&gt;kaggleのBNP Paribas Cardif Claims Management&lt;/a&gt;で2,947チーム中87位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.numer.ai/2016/05/03/Tournament-5-Final-Standings&#34;&gt;NUMERAIのTournament 5&lt;/a&gt;で4位&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;これまでに作成したアプリ等:08e0386ce22622b66038f29292f02cb1&#34;&gt;これまでに作成したアプリ等&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://asobi.herokuapp.com/&#34;&gt;ASOBI+&lt;/a&gt; (WebRTCを利用して位置情報や音声を共有できるWebアプリ)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://smapho-sagashi.appspot.com/&#34;&gt;スマホさがし&lt;/a&gt; (紛失したAndroidスマホをWebから鳴らせるアプリ)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.fc2.blog.zaburoapp.mayrecipebook&#34;&gt;うまコレ&lt;/a&gt; (クックパッドから取得したレシピを編集して保存できるAndroidアプリ)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.gr.java_conf.kchubachi.iraira&#34;&gt;Don’t touch the wall&lt;/a&gt; (イライラ棒風のAndroid向けゲーム)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;受賞歴:08e0386ce22622b66038f29292f02cb1&#34;&gt;受賞歴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DigitalArts Programming Contest 2013で「うまコレ」が入選&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;サイボウズ・ラボユース Hackathon 2014 夏で「KEIDORO+」が最優秀賞&lt;br /&gt;
(「KEIDORO+」を後日ブラッシュアップし「ASOBI+」を作成した)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ＮＴＴ西日本　学生向けアプリ開発コンテストで「ASOBI+」が佳作&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;その他活動:08e0386ce22622b66038f29292f02cb1&#34;&gt;その他活動&lt;/h2&gt;

&lt;p&gt;ブログ：&lt;a href=&#34;https://zaburo-ch.github.io/&#34;&gt;ZABURO app (https://zaburo-ch.github.io/)&lt;/a&gt;&lt;br /&gt;
趣味で書いたコードや作成したアプリの公開をしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/neural-fitted-q-iteration/&#34;&gt;Pythonで Neural Fitted Q Iteration を実装する&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/handle-exchange-data-by-pandas/&#34;&gt;pandasで為替データを扱う【Python】&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zaburo-ch.github.io/post/20141017_0/&#34;&gt;Wikipediaのアクセス上位10000ページの距離を計算した話&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>